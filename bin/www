#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const mongoose = require("mongoose");
const debug = require('debug')('rest-api-nodejs-mongodb:server');
const http = require('http');
const WebSocket = require('ws');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Connect to Mongo cluster.
 */

const MONGODB_URL = process.env.MONGODB_URL;
mongoose.connect(MONGODB_URL, { useNewUrlParser: true, useUnifiedTopology: true }).then(() => {
  //don't show the log when it is test
  if(process.env.NODE_ENV !== "test") {
    console.log("Connected to distant cluster");
    console.log("App is running ... \n");
    console.log("Press CTRL + C to stop the process. \n");
  }
})
    .catch(err => {
      console.error("App starting error:", err.message);
      process.exit(1);
    });
const db = mongoose.connection;


/**
 * Create HTTP server.
 */

const server = http.createServer(app);


/**
 * Create Websocket server.
 */

let wss;

//don't show the log when it is test
if(process.env.NODE_ENV !== "dev") {
  wss = new WebSocket.Server({
    server,
    perMessageDeflate: {
      zlibDeflateOptions: {
        chunkSize: 1024,
        memLevel: 7,
        level: 3
      },
      zlibInflateOptions: {
        chunkSize: 10 * 1024
      },
      clientNoContextTakeover: true,
      serverNoContextTakeover: true,
      serverMaxWindowBits: 10,
      concurrencyLimit: 10,
      threshold: 1024
    }
  });
} else {
  wss = new WebSocket.Server({
    port: 12730,
    perMessageDeflate: {
      zlibDeflateOptions: {
        chunkSize: 1024,
        memLevel: 7,
        level: 3
      },
      zlibInflateOptions: {
        chunkSize: 10 * 1024
      },
      clientNoContextTakeover: true,
      serverNoContextTakeover: true,
      serverMaxWindowBits: 10,
      concurrencyLimit: 10,
      threshold: 1024
    }
  });
}

console.log('Websocket server listen :')

locks = [];
locksID = [];

wss.on('connection', function connection(ws) {
  ws.on('message', function incoming(ref) {
    console.log('Received: %s', ref);
    locksID.push(ref)
  });
  ws.send('Connected to websocket server. Listening:')
  locks.push(ws)
});

wss.on('close', function deconnection(ws){
  ws.on('message', function incoming(message){
    console.log('Received: %s', message);
  })
  ws.send('Bye!')
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
